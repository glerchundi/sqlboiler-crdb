// Code generated by go-bindata. DO NOT EDIT.
// sources:
// override/templates/17_upsert.go.tpl (5.59kB)
// override/templates/singleton/crdb_upsert.go.tpl (1.416kB)
// override/templates_test/singleton/crdb_main_test.go.tpl (5.323kB)
// override/templates_test/singleton/crdb_suites_test.go.tpl (255B)
// override/templates_test/upsert.go.tpl (1.742kB)

package driver

import (
	"bytes"
	"compress/gzip"
	"crypto/sha256"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes  []byte
	info   os.FileInfo
	digest [sha256.Size]byte
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _templates17_upsertGoTpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xd4\x58\xdf\x6f\xdb\x36\x10\x7e\x96\xfe\x8a\x6b\x30\x20\xd2\xe0\x28\x7b\xce\xe0\x87\xfc\x68\xbb\xa2\x6b\xea\x35\xcd\x0a\xac\x28\x02\x5a\x3a\xd9\x44\x68\x52\xa5\xa8\xa4\x9e\xa6\xff\x7d\x38\x92\xb2\x24\xff\x48\xdc\xae\xdd\xba\xa7\x58\xe4\x91\xf7\xdd\x77\x1f\x79\xc7\xd4\xf5\x11\xfc\xc0\x04\x67\x25\x9c\x8c\x21\x39\xa5\x5f\x58\x26\x6f\xd9\x54\x20\xb8\x3f\xc9\x25\x5b\x60\xd3\x84\xd6\xb4\x4c\xe7\xb8\x60\x6e\x9a\x16\x74\x16\xf0\x17\x24\x57\xdd\xac\x5d\xc0\x73\x48\x4e\xb3\xec\xb9\x50\x53\x26\xe0\xa8\x69\xc2\xe3\x63\xb8\x2e\x4a\xd4\xe6\x39\x30\x63\x70\x51\x98\x12\x98\x04\x2e\x69\x6c\x04\x4c\x66\x90\x29\xb4\x63\x55\x91\x31\x83\xa0\x34\xf0\x99\x54\x1a\x41\x49\x48\x95\xcc\x05\x4f\x4d\x12\xe6\x95\x4c\x21\x52\xf0\x63\x5d\x3b\xfc\xc9\x75\x71\xc5\xe5\xac\x12\x4c\x37\x4d\xdc\x7a\x89\x2c\x08\xa9\x0c\x24\x97\xea\x5c\x49\x83\x9f\x4c\xd3\xa4\xe6\x13\x6d\x45\x1f\x89\x1f\x1c\x41\x5d\xa3\xcc\x08\xa4\xf7\xfc\x5a\x9e\x7b\x6f\x30\x55\x4a\x8c\x56\xce\xcf\x95\xa8\x16\xb2\x84\xf7\x1f\x4a\xa3\xb9\x9c\x8d\xfc\x02\x3f\x3e\xf2\xd1\xb4\x66\x53\xc5\x45\xe2\x3f\x62\x40\xad\x95\x86\x3a\x0c\x34\x9a\x4a\x4b\x50\x89\x43\xea\x80\xf6\x41\xda\x75\xcf\xd1\x5c\x9c\x45\x71\x5d\xa3\x28\xd1\x02\x1f\x41\x3b\xe1\x2d\xfd\xbc\xcc\x9a\x66\xb4\x01\x7d\x03\xf5\xc3\x60\xe3\xb0\x09\xc3\x15\x11\xa1\x4b\x21\x25\xa5\x97\x46\xfa\x39\x61\x92\xa7\x6b\x09\x9d\xfc\xb3\x8c\x82\xdd\xb3\xa4\x31\xcb\xd1\xde\x29\x9e\x7c\x77\x39\xae\xc3\x80\xe7\x14\x05\x1d\x91\xef\x2c\xc1\x3f\x5b\x5c\x4f\xc6\x20\xb9\x20\xa0\x41\x41\xb4\x47\xd6\xe5\x3b\xcd\x8a\xa7\x5a\x47\xa8\x75\x1c\x87\x41\xb3\x4d\x0c\x3b\xb2\xbf\x2d\xf9\x50\x95\x5c\xce\xe8\x1b\x3f\x61\x5a\x19\xa5\x3f\xe7\x80\xf7\xb6\x2e\xbe\x4c\x19\x93\x4d\xca\x09\x88\xa3\xf7\xa9\x87\xd4\x23\x7e\x53\x2e\x9d\xb9\x1f\xea\xad\xda\x9e\x8e\x7f\x49\x46\x5b\xc4\xde\x17\x37\xe1\xfe\x4f\xa5\xb2\x4a\xde\xb7\x90\xc5\x15\xe2\x80\x29\xc8\x54\x5a\x2d\x50\x1a\x66\xb8\x92\x90\x2b\x0d\x73\x75\x0f\x46\x41\xa1\x55\x81\x5a\x2c\xa1\x2a\x71\x18\xab\xf5\x38\x08\x77\x5f\x55\xfd\xcf\x45\xb5\xaa\x3f\x3c\x07\x05\xe3\x2e\xb9\xbe\x1e\xd9\xf9\x32\xb9\xc4\xfb\xe8\xa0\xae\x93\xc9\xed\xcc\x95\xff\x13\x90\x0a\xea\x7a\xd0\x12\x10\xbf\x77\x3c\xc3\xcc\x72\x5e\x59\x7a\x0e\xac\x1a\xc2\x80\xba\x05\xca\xbc\xa0\x5c\x1e\x18\xbe\xc0\xd2\xb0\x45\x71\xe3\xac\x6e\xe6\x28\x0a\xd4\x07\x90\x40\xe3\xac\x3b\x51\xff\xa2\xd4\x6d\x69\x65\x34\x90\x7f\xa6\xce\x30\x57\x1a\x5d\x16\xac\xd1\xde\x67\x61\x53\xca\x5d\xb4\x04\xd7\xa2\xb5\xe4\x87\x61\x20\xff\xbc\xc0\x9c\x55\xc2\xd8\x96\xe8\x63\x85\x9a\x63\x99\x5c\x2a\xf9\x07\x6a\xe5\xa7\xae\x90\x74\xe0\x55\x72\xa1\xee\x65\xa7\x13\xcf\xf4\x3b\x6e\xe6\xde\x78\x04\x2a\x0e\xc3\xe0\xf8\x18\xce\x2a\x2e\x32\x48\x59\x3a\x47\xb8\xc5\x25\x70\x79\x24\xb8\x44\xa8\x66\x82\x8b\x25\x1c\xc1\x62\x59\x7e\x14\x70\x57\x42\x41\x7f\x0b\xad\xa6\x02\x17\x65\x18\x4c\xab\x9c\xc0\x94\x46\x2f\x98\x9c\x09\xa4\xea\x70\x56\xe5\x39\xea\x28\xb6\x34\x6d\x48\x86\x82\x9c\x56\x79\xf2\x4e\x73\x83\x67\x4b\x83\xd1\xa1\x39\xa4\xdc\x00\x49\x73\xdb\x74\x6e\xa7\xc3\xf5\xe1\x84\x86\x29\xbf\x37\x23\x48\x09\x84\x66\x72\x86\x1b\x62\x1c\x6c\x78\x65\x75\x19\xa5\xbb\x37\x5c\x37\x2d\x8d\x4e\x95\xbc\x4b\x5e\x18\xc5\xa2\x81\x9c\x93\x97\x5c\x66\xf1\x56\x0c\x43\xbb\x73\x25\xbe\x2e\x8c\xe1\xf5\xb0\x1b\xc6\xd0\xee\x4b\x60\x6c\xee\xd9\x13\xe1\x03\x7b\x91\x86\x4e\xc6\x40\xb3\x7e\x22\x0e\x83\x4e\x24\x93\xaa\x15\xc9\xb4\xca\x63\x7b\xcc\xb6\x4a\xd6\x1d\xa9\x73\x92\xe5\xab\xca\x24\x6f\x7e\x55\xe9\x2d\xed\x64\x85\x3a\x72\x7a\xcd\xc8\xd1\xe3\xeb\xdf\xdf\xe2\xf2\xc3\xde\x8e\xae\xa5\x70\xae\xc2\xe0\x8e\x69\x7b\x46\xed\xfd\x13\x5a\x4d\x3f\xf1\x8e\x89\x80\xb6\x9d\xd4\x68\x08\xc8\x90\xf2\x17\xbd\x2f\x3a\x99\x61\x10\xec\x42\x70\x2a\x44\x7b\x4d\x3e\x60\xb5\xe5\x0c\xef\x67\xad\x2a\xd3\x5f\xd0\x65\x91\x3e\xe3\x30\x08\x7c\x71\x3b\x19\xaf\x89\xf7\xba\xf7\xf5\x55\x42\x98\x68\xbe\x60\x7a\xf9\x12\x97\x3d\x63\x22\x9a\x98\x15\x28\xfd\x21\x8b\xa9\x04\xfc\x64\x29\x7e\xbc\x02\x54\xd2\xbe\xfb\x8c\xf2\x77\xfd\x7a\x3d\xa0\x12\x55\x89\xcc\xde\xc8\x53\x7b\xd5\xf9\x70\x53\x0b\x01\x04\x2f\x6d\x7d\xb0\x05\x22\x68\x6f\x10\x22\x63\xed\x36\xe9\x50\xb6\x13\x7d\x9c\xab\x85\x63\x58\xb0\x5b\x8c\xba\x3a\x48\x2b\xf6\xe5\x83\xce\x32\xed\x55\x2c\x57\x4e\x46\xbb\x04\xbe\xb9\xd8\x06\x11\xb8\x13\x92\x50\x8d\x58\xc2\xd8\xc5\xec\x34\xfe\x1b\x0d\x9d\xab\xf4\x56\x2b\x96\xce\x2f\xce\xa2\x8c\x33\x81\xe4\xe2\xa0\xae\xfb\xaf\xe8\xa6\x39\xd8\xd6\xa9\x69\x34\xed\x70\x57\xf8\xdb\xca\x6e\xd3\xe8\x5c\xdf\x31\x51\xe1\x2b\x56\x14\x36\x7e\x3a\x40\x5d\xc9\x3a\xe3\x32\xf3\x53\xbb\x58\x79\xbb\x2c\x70\x67\xd4\xab\x6d\x5b\xaf\x41\x5b\x90\x7b\x85\x74\x50\x49\x2d\x27\x3e\x73\x1a\x4d\x4c\x86\x6d\xd2\x2c\x5c\x8d\xe6\x5b\x83\x25\xbf\xe4\x70\x0b\xd4\x21\x56\x0b\xb6\x71\xdd\x8a\xa5\xd1\xde\xbe\x98\x53\x9a\x92\x17\x32\xe3\x1a\x53\x13\xb5\x03\xbf\x93\xc5\xeb\x3c\x52\xa4\x9b\x3b\x26\x06\xcd\x81\x9d\x2c\x9f\x69\xb5\x68\x43\xb0\x1b\xfa\xab\x73\x90\xa4\xd8\x5d\x75\x0e\x09\xf5\x70\x5c\x1a\xd4\x39\x4b\xb1\x76\x0d\x8f\x55\xfd\x1a\x59\x3d\x22\xdb\x85\x9d\xf3\x89\xd1\xbb\x5d\xf7\xf6\x70\x91\xf2\xdc\x35\x84\x17\x38\xad\x66\xaf\x54\xe6\x5a\x81\x9b\x11\xdc\xc0\x18\xf2\x85\x49\x9e\x15\x9a\x4b\x23\x64\xd4\x99\xd9\xca\xa3\xdb\x2d\xad\xda\xe3\xbd\x17\x11\x57\x9d\xef\x47\xa2\x5b\xeb\xad\x5d\x17\x18\x38\xa5\x50\x23\x97\xd8\x73\xf5\x46\xdd\x47\x3d\x2c\xce\x47\x92\x24\x71\x72\x95\x32\xab\x3c\xa2\x88\x06\xec\x96\xb6\xe1\xd9\xb9\x93\x77\x15\xd9\xb6\xf1\x73\x76\xf5\x6f\x9d\x95\xd2\xc6\x63\x28\x3f\x8a\xe4\xa9\xd6\x97\xea\x8d\xba\x77\x85\xdb\x7b\x24\x09\x1e\x1f\x03\x5d\x08\xa9\xd2\xf6\x46\xb0\xef\x1d\x79\x68\xbc\x14\x80\xc9\xa5\x99\xd3\xc3\xe8\x7e\x8e\x12\xcc\x1c\x35\x1e\x96\xd4\x74\xbb\x5b\xc0\x6b\xb5\xeb\xde\xb6\x53\x75\xd3\x9e\x2b\x1b\x23\xbd\x2c\xb6\x33\xb5\x4e\xcc\xe6\xba\xc7\x79\x19\xd2\xd0\xb5\xeb\x5b\xdb\x6c\x2a\x29\xf4\x68\xa4\x17\xa3\xbd\x04\x3f\xa7\xb0\x1c\x74\x02\xea\x37\x05\xfb\x75\x19\x6d\x37\xb3\x87\xb9\xed\x5e\x60\xec\xc2\xdd\xdb\xc1\xaa\x8b\x09\x1e\x78\xca\xac\xfe\xdd\x97\xa9\xd3\xdc\xa0\xfe\xa2\x67\x8c\x7f\xa8\xac\xd2\xe6\x37\x95\x5c\xf4\x9f\x30\x4d\xf8\x77\x00\x00\x00\xff\xff\x6c\x7f\xfb\xb1\xd6\x15\x00\x00")

func templates17_upsertGoTplBytes() ([]byte, error) {
	return bindataRead(
		_templates17_upsertGoTpl,
		"templates/17_upsert.go.tpl",
	)
}

func templates17_upsertGoTpl() (*asset, error) {
	bytes, err := templates17_upsertGoTplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/17_upsert.go.tpl", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x9a, 0xf8, 0x3c, 0xcf, 0xff, 0x47, 0xc4, 0x73, 0xa3, 0xd3, 0x8c, 0x39, 0x18, 0xd, 0xed, 0xbf, 0x17, 0xbf, 0xfd, 0x7c, 0x61, 0xc4, 0xeb, 0x4d, 0x10, 0xe6, 0x2a, 0xcf, 0x8e, 0x1e, 0x5c, 0x6d}}
	return a, nil
}

var _templatesSingletonCrdb_upsertGoTpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x94\x54\x6d\x6f\xda\x3c\x14\xfd\x6c\xff\x8a\xdb\x48\x55\x13\xc9\x0a\x4f\xbf\x3e\x12\x1f\x5a\x92\x76\x4c\x28\x14\x48\xb6\x49\xd3\x54\x85\xe4\x06\xac\x05\x87\xf9\x85\xb6\x5a\xf9\xef\x93\xf3\x42\x68\xe9\x3a\x55\x42\x06\xf9\xde\x73\x7c\x7c\x7c\x2e\x83\x01\x2c\x0d\x2f\xf3\x64\xab\x50\xea\x99\x41\xf9\x34\xaa\xb2\x9f\xb2\x4a\xb3\x75\x70\xdd\xd4\x14\xa4\xb0\x98\x4d\x40\xe9\x54\xe3\x06\x85\x06\xa5\x25\x17\x2b\x30\xca\xae\x7a\x8d\x60\x6a\x78\x90\xea\x14\xb6\xb2\xda\xf1\x1c\x73\x9f\x16\x46\x64\xef\xb1\xbb\x39\x4f\x21\x97\x7c\x87\x52\xf9\x01\x4f\x4b\xcc\x34\x03\x9d\x2e\x4b\x8c\xd2\x0d\xb6\xa7\x30\x30\xdb\x3c\xd5\x38\x15\xa3\x4a\x14\x25\xcf\x34\x2c\xab\xaa\x64\x20\x51\x77\x35\x06\x59\x5b\x63\xf0\xb0\xe6\x1a\x4b\xae\x34\x7c\xff\xd1\x30\x78\x9d\xde\xdf\x94\x74\x7d\x30\xb4\x9b\x9b\x54\xac\x4a\xf4\xc7\x39\x0a\x3d\x33\x95\xc6\x45\xc9\x33\xb4\xba\xfc\xc9\x8c\x81\xfd\x9e\xcf\x7a\x72\x8f\x92\x9e\xfd\x23\x04\x07\x94\x47\x89\xc4\x8f\x61\x25\x6a\x8f\x52\xb2\x34\x05\xfc\x7f\x8c\xbb\x45\x7d\x6d\x8a\x02\xa5\xeb\x51\x92\x63\x81\xf2\xa8\x78\x67\xba\xe2\xd2\x14\x16\x9e\x55\xa5\xd9\x08\x65\x29\x9c\x20\xbc\xb9\x4a\x26\x31\x7c\xb9\x9a\x24\xe1\xc2\xa1\x84\x17\x50\xa2\x70\x7b\x95\x70\x36\x84\xff\xac\x5d\x07\xdc\x10\x8a\x8d\xf6\x17\x5b\xc9\x85\x2e\x5c\xc7\x3d\x57\x5e\x8b\x07\xfb\xdb\x61\x94\x10\xd2\xd8\xac\xfc\xcf\x15\x3f\x62\x63\xe0\x30\x70\xbc\xae\xa3\x53\x58\xa6\x19\xae\xab\x32\x47\xa9\xea\x3b\x27\x0a\xc7\x22\xc7\xc7\xe3\x02\x7b\xa5\x8b\xc1\x25\x83\x4b\xcf\xa3\x64\x4f\x29\xb9\x67\x70\xdf\x0a\xbb\x69\x85\x51\x62\x8d\xb2\x47\x39\xe3\x68\x11\xce\x63\x18\x47\xf1\x14\xce\x95\xfd\x4c\x23\x18\x4d\xa3\x9b\xc9\x78\x14\x43\x2d\xf8\x10\x35\xd6\xdf\x94\x51\x62\xfd\x1a\x0c\x20\xeb\x92\x0a\xf8\xb8\xc5\x4c\xab\x3a\xe9\x87\x00\xe1\x0e\x05\xe8\x75\x65\x56\x1a\x1e\x10\x52\x89\x20\x2a\xdd\x04\x92\x8b\x55\xfd\x62\xfe\x57\xc9\x35\x5e\x3f\x69\x74\x2f\xdc\x0b\xef\x68\x6f\x51\x5b\xe5\xbe\x70\xac\xcf\x70\x6d\xd8\x1b\xed\x8e\x07\x8e\x55\xc7\x0b\x38\x3b\x99\x8a\xe7\xe7\xda\xad\x66\xdf\x83\x61\xf7\x84\x27\x24\xc1\x14\xa2\x69\xfc\x69\x1c\xdd\x3a\xd6\x49\xc0\x52\xe1\x5f\x3b\x93\xbb\xe0\x2a\x0e\x61\x11\xc6\xcd\xd1\xa4\xa8\x24\x70\x06\x3b\x1b\x25\x99\x8a\x15\xb6\x33\x58\x33\x58\x65\xbc\x4f\x0f\x79\x6d\x02\xb3\x26\x10\xb2\xb7\xcb\x2f\x9b\xf9\xfc\x65\xa8\xfb\x61\x38\x99\x83\x5d\x8d\x7c\x2d\xb1\x21\x79\xb3\xe4\xc0\x10\xc2\x6f\xa3\x49\x12\x84\x81\xef\xfc\x03\xbd\x6f\x22\xd5\x4e\x82\x9d\xb9\xfe\x16\xa7\xc4\xf3\x30\x4e\xe6\xd1\x38\xba\x85\x9a\xf7\xdd\x57\xad\xff\xa6\xba\x07\xb5\x67\x48\xd4\x46\x0a\xb0\xa0\xb6\xdf\xa3\xfb\x3f\x01\x00\x00\xff\xff\xb7\x86\x27\x52\x88\x05\x00\x00")

func templatesSingletonCrdb_upsertGoTplBytes() ([]byte, error) {
	return bindataRead(
		_templatesSingletonCrdb_upsertGoTpl,
		"templates/singleton/crdb_upsert.go.tpl",
	)
}

func templatesSingletonCrdb_upsertGoTpl() (*asset, error) {
	bytes, err := templatesSingletonCrdb_upsertGoTplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/singleton/crdb_upsert.go.tpl", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0xd, 0x86, 0x7, 0x46, 0xba, 0xad, 0x9c, 0xf2, 0x87, 0x63, 0xf2, 0x39, 0x8f, 0x91, 0xf2, 0x4, 0x5c, 0x29, 0x91, 0xf9, 0xde, 0x8c, 0xea, 0x84, 0xe2, 0xa1, 0xfa, 0xe4, 0xd4, 0xfe, 0x75, 0x99}}
	return a, nil
}

var _templates_testSingletonCrdb_main_testGoTpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xec\x58\x59\x73\xdb\xbe\x11\x7f\x16\x3f\xc5\xfe\x39\xe3\x84\x74\x69\x2a\xcf\xee\xb0\xae\x2c\xc9\x19\x4f\x12\x3b\x95\x9c\xa6\x6d\x92\x69\x20\x72\x25\x61\x44\x02\x34\x00\x46\x51\x5c\x7f\xf7\x0e\x0e\x1e\x3a\xec\xb8\x75\xda\xa7\xbf\x9f\xe4\xc5\x6f\xef\x03\x58\x7e\x23\x02\xc4\xe2\xfb\x70\x74\x7e\xb1\xc2\x0d\x24\x20\x70\x81\xdf\xcb\xf8\x5d\x25\xd5\x90\x17\x25\xcd\x31\xf8\x1a\x9c\x15\x61\x10\x7c\x66\xe1\x59\x7c\x3c\xbc\xbe\x9a\xde\x4c\x06\x97\x57\x37\xf1\xf1\xd9\xc5\xf5\x64\x7c\xf9\xfa\x0a\xde\x8c\xff\x1e\x1f\x9f\x7d\x66\xff\x32\xa0\x4f\xe4\xe4\xc7\xe0\xe4\x1f\xf0\xcf\x2f\xc7\x7f\x1d\xbc\xbd\x1c\x0d\x6e\xc6\xb0\xc5\x66\xb0\xe1\xd7\xd0\xf3\xd4\xa6\x44\x48\x45\x36\xbb\x41\xa9\x50\x80\x54\xa2\x4a\x15\xdc\x79\x00\xd9\x6c\xc8\x19\x83\x63\x79\x9b\xc7\xa3\x73\xcf\x50\xae\x48\x81\x60\xfe\xa4\x12\x94\x2d\x3c\x80\x25\x97\x0a\x60\x87\x58\x49\x14\x7b\xc4\x92\x48\xb9\x47\x94\x32\x2f\x78\x86\x7b\xc4\x14\x85\xda\x23\xea\x08\xed\x11\x05\xe7\xca\xa0\x5b\x45\x5c\x34\x26\x51\xa6\xb4\xe9\x0a\xa5\x1a\x9d\x5b\xf3\x1d\xae\xa1\x7e\x98\xbc\xed\x8a\xcc\x66\x96\xd0\xd1\x73\xef\x79\xf3\x8a\xa5\x10\xa4\x70\xdc\x06\x2b\x04\xca\x24\xa6\x95\xc0\x8b\x9c\x2c\x82\xd0\xa1\xe1\xce\xeb\xe9\xac\xd6\x87\xb5\x90\x1e\x9d\x43\x1a\xd7\xfe\x26\x09\xf8\x19\x95\x64\x96\xa3\xaf\x39\x7a\x0d\x3c\x01\xff\xe4\xa4\xfe\xcf\xf7\x7a\xf7\x80\xb9\xc4\x3d\x8c\x3e\xf1\x7a\x02\x55\x25\x58\xa3\xab\xb1\x94\x32\xaa\x82\xd0\xe5\xf1\x1d\xa1\x0c\x12\x78\xd1\x9a\x7e\x77\xaf\x91\xfd\x3e\x48\x54\x55\x09\x59\x55\x94\x12\xd4\x12\x21\x23\x8a\xcc\x88\x44\x90\xe9\x12\x0b\x02\x84\x65\x40\x0b\x1d\x50\x09\x54\xe9\x68\x72\x20\xa0\x50\x93\x88\xd8\x80\x20\x2c\xe3\x45\xbe\xd1\xb2\x16\xc8\x50\x10\x85\x99\x89\x6b\x47\x14\x07\xb5\x24\xca\x50\x25\xa4\x84\xc1\x0c\x41\x54\x0c\xc8\x82\x50\x26\x95\x16\x5c\x49\x1d\x39\xb5\xc4\x6d\x41\xf2\x36\x9f\x71\x9a\xa3\x80\xeb\xc9\x3b\x28\x49\xba\x22\x0b\x8c\x0f\x27\xc3\xb8\x12\x84\x80\x42\x70\x61\x3c\xd7\x59\x40\x21\x2c\x45\xe7\x3b\x8d\x5d\x09\x27\xf0\x8d\x96\x28\xe2\xd7\xa8\xa6\x26\x3b\x81\xaf\x45\xc5\xd9\x8c\x91\x02\xfd\xd0\x60\x4d\x65\x3f\x84\xd4\x87\x0e\x67\x8a\xfd\x21\x9c\x3e\x74\x38\x53\xff\x0f\xe1\xf4\x61\x8d\xd3\xe5\xdb\xc1\x5d\x32\x55\x83\xb8\xa8\x95\x36\x75\xf4\x80\x3c\x77\xde\xa2\x4d\x8b\x3c\x82\xd6\xe7\x7e\xe8\xf5\x0c\xd8\x8e\xa2\x07\xb1\x2b\xdc\x34\xd0\xa6\xfd\x1e\xc1\xd7\x18\x63\x4d\xbf\x0f\x43\x81\x44\x21\x10\x57\x3e\xf4\x07\x66\x90\xcd\x40\xc7\x3e\x36\xf6\x76\xda\x35\x69\x41\xf1\x54\xe9\x7e\xb1\x07\x41\x9d\xcc\xd0\xf3\xa0\x57\xb3\xe8\xd6\x4d\x60\x56\xd1\x3c\xfb\x4b\x85\x62\xe3\x2c\xb1\x49\x8a\x5c\x12\xa2\x2d\x0d\x91\x4b\x75\xe4\x42\x1f\xb5\xd1\x75\x3f\x57\xb8\x89\xda\x20\xba\x9f\xb5\x4f\x26\x0e\x76\x66\x3c\x49\xb1\x35\xfa\xd9\x4a\x3d\x00\x3a\x37\xd5\x9d\x68\xa1\x82\x97\x37\xc6\xa3\x20\xfc\xa3\xa1\xfe\x96\x00\xa3\xb9\x69\x03\x00\x37\x25\x50\x08\x0f\xe0\x7e\x9b\x35\x35\xb9\x78\x3a\xb3\xd7\x4e\xa1\x53\xcd\xbf\x3d\x03\x5d\xd7\xe9\x81\x32\x2c\xb2\x08\xac\xf4\x61\x91\xc1\x31\x7e\xc7\x34\x1e\x16\x99\x55\x9f\x23\x0b\x6a\xd6\x10\xfe\x04\xaf\xac\x32\xc7\x08\x09\x58\x38\x2f\x0a\xc2\xb2\xc0\x4f\x79\xba\x12\x9c\xa4\x4b\x3f\x02\x5f\x83\xfc\x6e\x2c\xfd\x93\x93\x4a\xe4\x8e\xf4\x61\xf2\x36\x6a\x06\xa2\x39\xd3\xf8\x13\x1d\xda\xc4\x4e\x35\x53\x86\xd0\xb1\xed\x51\x6d\xf2\x56\x4b\xee\xa8\x68\x2a\x6d\x57\x8d\x1b\x78\xfe\x76\x7d\x69\x65\xcd\x0c\xff\x95\x3e\xfe\x4f\x3d\xfb\x89\x3f\xba\xfe\x44\x04\x6b\x5d\x03\x94\xc7\xef\x69\x89\x26\xf9\xce\xb7\x78\xaa\x32\x5e\xe9\x99\xb0\xf6\x3a\xe6\x68\xb2\xb9\x8a\x18\xae\x2f\xde\xe0\x66\x84\x52\x09\xbe\x41\x11\xb4\x4f\xa0\x08\xc4\x76\x75\xb7\x22\x89\x50\x07\x2b\xb4\x5b\xa3\x5c\xc8\xf8\xa3\x20\x65\x80\x42\x44\xe0\xcf\x09\xcd\xf5\x85\xc4\x41\x6a\x76\x78\xd9\x04\xc0\xc8\x7d\x09\xa9\x8d\x8c\x1f\xee\x75\x46\xc7\xe8\x5f\xab\x58\xde\xe6\xbb\x7a\x0f\xf9\xfb\x91\xd0\x67\x68\x5d\x13\xaa\x60\xce\xc5\xcf\x15\xf7\xfb\x30\x98\xeb\xb7\x5f\x5d\x97\x54\x42\xc6\x99\x9e\x43\x39\x97\x68\x9e\x05\x6b\x41\x15\x02\xb2\x0c\xf8\xdc\x10\x4a\x5a\x62\xd7\xe8\x75\x3c\xd4\xe0\xff\xde\x5e\xab\x4b\x8b\x3d\x10\x92\x36\x17\xff\xaf\xa0\x38\x61\x8c\xe6\x0f\x3e\xfe\x44\xc5\x86\x45\x16\x48\x5d\xd2\x51\x2d\xc1\x3d\xf6\x22\x20\x62\x21\x21\x8e\x63\xfb\x7f\xf7\x55\x92\x16\x99\xee\x9a\xad\xbe\x74\xdc\x96\x2d\x8e\xe3\xd0\xe2\xe2\x31\xfb\x06\x09\x70\xa9\x7f\x50\xc1\x59\x50\xb7\x86\x1e\x9f\x46\x73\xa8\xc3\xf0\xca\x05\x21\xed\xb4\x98\x55\x2c\xe3\x2b\x5c\x4f\x90\x64\x28\x1c\xbe\xf6\x50\xda\x0e\x3d\x4d\xe0\xc5\x6c\xa3\x50\xc6\xe7\xd5\x7c\x6e\x5e\x86\xe6\x4c\x07\xf8\xe0\x59\xda\xed\x6e\x2b\xa4\xa5\xda\x74\x59\xf6\x36\x81\xfa\x9e\x28\xb2\x78\x52\xb1\x83\xa9\x9b\x17\x2a\x7e\x2f\x28\x53\x39\x0b\xea\x64\x89\x8a\x31\xca\x16\xa7\x7e\x13\x59\x1b\x9b\x70\x8f\xc3\x9a\x10\xbb\xfb\x36\x3c\x08\x40\x21\x76\x00\xbb\x97\xda\x93\x32\xbe\x7d\x55\x36\x29\x7d\xfc\x42\xec\x49\x55\x98\x30\x6b\x9b\xa6\xa5\x36\x6a\x1e\xf8\xc3\xc9\x58\x6f\x65\xa3\xc1\xcd\xe0\x7c\x30\x1d\xc3\x91\xdc\x9b\xb2\x66\x89\x30\x65\xf4\xe9\x4b\x67\x85\xd8\xbb\x38\xcd\x66\x60\x70\x49\x83\xbc\x7b\xfa\xad\xa5\xeb\xb0\x52\x7a\xc8\x6b\x43\xef\xb7\xf6\x8d\xff\x48\xea\x41\x59\xcd\x86\x92\xc6\xae\x5f\x7c\x2d\xa0\x7b\x0d\x35\x25\xff\x50\xd8\xbb\x8f\x9b\x67\x05\x7d\x34\xb9\x7e\xdf\x86\xfc\xf2\x02\xc6\x7f\xbb\x9c\xde\x4c\xe1\x48\xc2\x70\x30\x1d\x0e\x46\xe3\xdf\x93\x60\xd7\x42\x85\x44\x64\x7c\xcd\xc0\x09\x93\x90\xe6\x48\x58\x55\x82\x22\x72\x25\x61\xbd\x44\x66\xee\x01\xbb\xd3\xcd\x29\xa3\x72\x59\x37\xed\xe1\x2c\xd6\x22\x1f\xd9\xd0\xb6\x9f\xb4\xe6\xf3\xc3\x23\xd7\xca\xde\xa3\xb6\xe6\x01\x83\x7a\xd6\x0b\xf9\x89\xf3\x80\x33\xed\x4e\xe0\x3e\x91\x44\xd6\x0d\xbb\x75\x9b\x65\xdf\xd9\x73\x48\x53\x7d\x18\x19\x0d\x4e\xe7\x6e\x38\x5a\x90\x1b\xac\xb7\x79\x7c\x5d\x22\x0b\xfc\x92\x4b\xb5\x10\x28\xb7\xf3\x1f\xb6\x3e\x1f\xd2\xc9\x68\x1e\x1d\x70\x71\xdb\x94\xda\xd9\xbd\x55\xc6\x2e\x32\x76\x8d\xb1\x7b\x72\x64\x3f\xfe\xd4\x57\x9e\xd9\x5b\x29\x53\x11\x34\x9b\x4c\xbd\xc7\x34\x5b\xcc\xfe\xf7\x9a\xdd\xcf\x26\x55\xd9\xfd\x60\x62\x76\xeb\xdf\x12\xf0\xed\x47\x92\xaa\x84\xc4\xd0\x4c\x55\xd3\xb9\xfd\xa6\xb4\x73\xbe\xd5\xf3\x47\xf2\xd4\xcc\xd6\xaa\xb4\xb6\x87\x86\x93\x57\xaa\xac\xf6\x07\x44\x1d\xd5\xdb\xfc\xb4\xdf\x3f\x92\x7f\xd6\xcc\x59\xff\x48\x9e\x39\x87\x92\x46\x94\xdd\xdd\xec\xe6\x56\x07\xc3\x81\xc2\x66\x42\x38\xaf\xdb\x01\xe1\xd4\xfe\x61\x47\xed\x0b\x07\xb4\xe2\x6b\xae\xda\x45\x27\x69\x85\x9b\x27\x09\x5a\xe1\xa6\x91\xa3\x79\x76\xc4\x34\x1b\xe4\x53\x64\xd5\xe0\x46\x60\x67\xe9\x6d\xa7\x8a\x15\xe0\xdd\xff\x3b\x00\x00\xff\xff\x40\x34\x17\x6c\xcb\x14\x00\x00")

func templates_testSingletonCrdb_main_testGoTplBytes() ([]byte, error) {
	return bindataRead(
		_templates_testSingletonCrdb_main_testGoTpl,
		"templates_test/singleton/crdb_main_test.go.tpl",
	)
}

func templates_testSingletonCrdb_main_testGoTpl() (*asset, error) {
	bytes, err := templates_testSingletonCrdb_main_testGoTplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates_test/singleton/crdb_main_test.go.tpl", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0xcd, 0x52, 0x86, 0xba, 0x6f, 0x33, 0xa9, 0xf2, 0x78, 0x36, 0xf, 0xb9, 0x16, 0xa9, 0xcd, 0xe1, 0xc2, 0xf2, 0x6d, 0xf1, 0x2e, 0x6a, 0x51, 0xd4, 0xbf, 0xf5, 0x4f, 0x3b, 0x44, 0xce, 0xd3, 0x4e}}
	return a, nil
}

var _templates_testSingletonCrdb_suites_testGoTpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x54\x8f\xc1\xca\x83\x30\x10\x84\xef\xff\x53\x0c\xe2\x41\x7f\x34\x0f\xf0\xc3\x7f\xea\xa9\x3d\xf4\x50\xec\x03\xa4\x75\x95\x40\xba\x15\xb3\x42\x21\xe6\xdd\x8b\x31\x58\x7b\xcb\x64\xe6\xdb\x9d\xed\x26\xbe\xa3\x21\x27\xd7\xc1\xd1\x28\x85\xe0\x57\xc8\x89\xe1\x5e\x35\x25\xfc\x0f\xe0\x7d\x8d\x51\x73\x4f\xc8\x0d\xb7\xf4\xaa\x90\x8b\xbe\x59\xc2\xdf\x3f\x54\xb3\xbc\x5c\x08\x29\x67\xba\x64\xaa\xa3\x3b\x3d\x0d\x47\x1b\xf5\xe6\x93\x75\x7b\xb9\x66\xcf\xfa\x11\x87\x25\x32\xca\x19\x83\x9d\x46\x6d\x31\x43\x8c\x58\x3a\xe8\x0d\x14\x75\x99\xb8\xc8\xbc\xff\xd0\x21\x64\x15\x96\xda\xdf\x9f\xeb\x49\x65\x5c\x46\xdc\xee\x7b\x24\x15\xde\x01\x00\x00\xff\xff\x91\x6e\x4f\x2d\xff\x00\x00\x00")

func templates_testSingletonCrdb_suites_testGoTplBytes() ([]byte, error) {
	return bindataRead(
		_templates_testSingletonCrdb_suites_testGoTpl,
		"templates_test/singleton/crdb_suites_test.go.tpl",
	)
}

func templates_testSingletonCrdb_suites_testGoTpl() (*asset, error) {
	bytes, err := templates_testSingletonCrdb_suites_testGoTplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates_test/singleton/crdb_suites_test.go.tpl", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x3c, 0xee, 0x2e, 0x96, 0xb6, 0x68, 0x8e, 0xe6, 0x13, 0x5b, 0x19, 0xc, 0x3f, 0x8d, 0xbd, 0x45, 0xf6, 0x91, 0xd7, 0x45, 0x15, 0xdd, 0x12, 0x15, 0x2a, 0x56, 0x1f, 0x17, 0xb9, 0xb8, 0xb3, 0x99}}
	return a, nil
}

var _templates_testUpsertGoTpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xd4\x54\x4f\x6f\xdb\x3e\x0c\x3d\x5b\x9f\x82\xbf\xe0\xb7\x41\x1e\x5c\x15\xbb\x76\xc8\xa1\xff\x0e\xc5\xb0\x20\x68\x9c\xf3\xa0\xda\x74\x2a\x44\x91\x0c\x89\x5e\x92\x19\xfa\xee\x83\xe4\xb4\x4d\xdb\x74\x08\x86\x0d\xc3\x0e\x89\x2d\xe1\xf1\x3d\x92\x8f\x74\xdf\x9f\xc0\xff\x52\x2b\xe9\xe1\x6c\x0c\xe2\x3c\xbe\xa1\x17\xa5\xbc\xd3\x08\xc3\x43\x4c\xe4\x0a\x43\x60\x4d\x67\x2a\x20\xf4\xd4\xf7\x43\x84\x98\xb7\x53\xdd\x39\xa9\x43\x98\xb7\x1e\x1d\x71\x82\x0f\x11\xa0\xcc\x42\x94\x39\xf4\x2c\x23\x31\x95\x4e\x6a\x8d\x9a\xe7\x8c\x65\xaa\x01\x8d\x86\x3f\x12\x5c\xd9\xb5\x99\x29\xb3\xe8\xb4\x74\x21\x5c\x5a\xdd\xad\x8c\xcf\x61\x3c\xfe\x19\x6c\xea\xd4\x4a\xba\xed\x67\xdc\x3e\x06\xf4\x2c\xcb\x48\xcc\x96\xaa\xe5\xa3\xf8\xdf\x2a\xb3\x00\x4a\x35\xac\x15\xdd\x83\x35\x7a\x0b\xed\x10\x07\x4b\xdc\x42\x35\x44\x8e\x72\x96\x05\xc6\x32\x8f\x58\xc7\xfa\x9d\x34\xb5\x5d\xa9\xef\x28\x26\xb8\x9e\x21\xd6\x3c\x67\xd9\x37\xe9\x00\x5d\xfa\x59\xc7\xb2\xd3\x53\x38\x27\xc2\x55\x4b\x40\xf7\x08\x37\x93\xd9\xf5\x6d\x09\x5e\xd5\x08\xb6\x01\x69\x60\x3e\x8d\x37\x2c\xb3\x91\x71\xaf\x57\x4f\x15\xf4\x21\xb5\x22\x92\xee\x6b\xce\xc8\x75\x15\xf1\x98\x4c\x01\xef\x6d\x01\x6f\x34\xe0\xea\xa2\xdc\xb6\xe8\x0b\x20\xd7\x61\xfe\x29\xf1\xfc\x37\x06\xa3\xf4\xae\x11\xd7\x31\xd3\x86\x8f\xe6\x26\xb5\x80\xec\x93\xc8\xe1\x84\xc0\x27\xe9\x33\x78\xe7\x47\x45\xe4\xdb\xf5\xa5\xef\x55\x03\xc6\x12\x88\x89\xbd\xb4\x86\x70\x43\x21\x54\xb4\x89\x95\x55\xc3\x59\x5c\xc8\x6a\xb9\x70\xb6\x33\x35\xcf\xfb\x1e\x4d\x1d\x02\xcb\x06\xc8\x97\xce\x53\xb9\xe1\x89\x65\x9f\xe1\xd5\xc5\x9d\x55\x5a\x5c\xe0\x42\x99\xc4\xa1\x3d\xee\xdf\x95\x1b\x5e\xd1\xa6\x88\x05\x3e\x28\x1c\x05\xca\x59\x56\x63\x83\x0e\xe2\xe4\xf2\x1c\x7a\xf8\x0a\x63\xa0\x8d\xb8\xb5\x5a\xdf\xc9\x6a\xc9\x73\x08\xd1\xe1\x47\x2f\xac\xd8\x0d\xf2\x5b\x85\x47\x4f\xd0\xd4\x70\x12\x02\xc4\x53\x23\xb5\xc7\x24\x5a\x40\xca\xe5\xc6\x34\xe8\x78\xfe\xfc\x74\x9c\x47\x5d\x92\x3e\x6c\xd0\x2b\x67\x2a\xdb\x19\x4a\x17\x2f\xa6\xec\x61\x23\x79\x2e\x2e\x23\xe6\xc8\x52\x9e\xba\xf0\x3a\x4b\xfe\x20\x1b\x21\x49\x38\x82\x3e\x3e\x83\x8c\xd6\xd2\x10\x58\x83\xe0\xb0\xb2\xae\x2e\x60\x61\xe9\x6c\x54\x0c\xf8\x5d\xd2\x2f\x56\x67\x3e\xbd\x3a\x2f\xaf\x0f\xad\xce\xef\x58\x8e\x9d\x35\xc7\x7e\x44\x84\x10\x7f\x74\x95\x7e\x7d\xc6\xe2\x96\xff\xe5\x11\xfb\x47\x26\x2c\xfc\x08\x00\x00\xff\xff\x3e\xf4\x07\x51\xce\x06\x00\x00")

func templates_testUpsertGoTplBytes() ([]byte, error) {
	return bindataRead(
		_templates_testUpsertGoTpl,
		"templates_test/upsert.go.tpl",
	)
}

func templates_testUpsertGoTpl() (*asset, error) {
	bytes, err := templates_testUpsertGoTplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates_test/upsert.go.tpl", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x66, 0x85, 0xb7, 0x95, 0xff, 0xda, 0xe2, 0x2d, 0x72, 0xc5, 0x95, 0x96, 0x16, 0xb6, 0x96, 0xb3, 0xb9, 0xdd, 0xe, 0x31, 0x38, 0x14, 0x5d, 0xea, 0x8b, 0x74, 0x4f, 0xcf, 0x25, 0xb2, 0xe2, 0x9a}}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// AssetString returns the asset contents as a string (instead of a []byte).
func AssetString(name string) (string, error) {
	data, err := Asset(name)
	return string(data), err
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// MustAssetString is like AssetString but panics when Asset would return an
// error. It simplifies safe initialization of global variables.
func MustAssetString(name string) string {
	return string(MustAsset(name))
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetDigest returns the digest of the file with the given name. It returns an
// error if the asset could not be found or the digest could not be loaded.
func AssetDigest(name string) ([sha256.Size]byte, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return [sha256.Size]byte{}, fmt.Errorf("AssetDigest %s can't read by error: %v", name, err)
		}
		return a.digest, nil
	}
	return [sha256.Size]byte{}, fmt.Errorf("AssetDigest %s not found", name)
}

// Digests returns a map of all known files and their checksums.
func Digests() (map[string][sha256.Size]byte, error) {
	mp := make(map[string][sha256.Size]byte, len(_bindata))
	for name := range _bindata {
		a, err := _bindata[name]()
		if err != nil {
			return nil, err
		}
		mp[name] = a.digest
	}
	return mp, nil
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"templates/17_upsert.go.tpl":                       templates17_upsertGoTpl,
	"templates/singleton/crdb_upsert.go.tpl":           templatesSingletonCrdb_upsertGoTpl,
	"templates_test/singleton/crdb_main_test.go.tpl":   templates_testSingletonCrdb_main_testGoTpl,
	"templates_test/singleton/crdb_suites_test.go.tpl": templates_testSingletonCrdb_suites_testGoTpl,
	"templates_test/upsert.go.tpl":                     templates_testUpsertGoTpl,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"},
// AssetDir("data/img") would return []string{"a.png", "b.png"},
// AssetDir("foo.txt") and AssetDir("notexist") would return an error, and
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		canonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(canonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"templates": &bintree{nil, map[string]*bintree{
		"17_upsert.go.tpl": &bintree{templates17_upsertGoTpl, map[string]*bintree{}},
		"singleton": &bintree{nil, map[string]*bintree{
			"crdb_upsert.go.tpl": &bintree{templatesSingletonCrdb_upsertGoTpl, map[string]*bintree{}},
		}},
	}},
	"templates_test": &bintree{nil, map[string]*bintree{
		"singleton": &bintree{nil, map[string]*bintree{
			"crdb_main_test.go.tpl":   &bintree{templates_testSingletonCrdb_main_testGoTpl, map[string]*bintree{}},
			"crdb_suites_test.go.tpl": &bintree{templates_testSingletonCrdb_suites_testGoTpl, map[string]*bintree{}},
		}},
		"upsert.go.tpl": &bintree{templates_testUpsertGoTpl, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory.
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	return os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
}

// RestoreAssets restores an asset under the given directory recursively.
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(canonicalName, "/")...)...)
}
