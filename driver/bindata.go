// Code generated by go-bindata. DO NOT EDIT.
// sources:
// templates/17_upsert.go.tpl (5.61kB)
// templates/singleton/crdb_upsert.go.tpl (1.416kB)
// templates_test/singleton/crdb_main_test.go.tpl (3.932kB)
// templates_test/singleton/crdb_suites_test.go.tpl (255B)
// templates_test/upsert.go.tpl (1.747kB)

package driver

import (
	"bytes"
	"compress/gzip"
	"crypto/sha256"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("read %q: %w", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("read %q: %w", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes  []byte
	info   os.FileInfo
	digest [sha256.Size]byte
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _templates17_upsertGoTpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xd4\x58\x5d\x73\xdb\xb6\x12\x7d\x26\x7f\xc5\xc6\x73\x27\x26\xef\xc8\xf4\x7d\xf6\x1d\x3d\xf8\x23\x49\x33\x69\x1c\x35\x8e\x9b\x99\x66\x32\x1e\x88\x5c\x4a\x18\x43\x00\x03\x82\x76\x54\x96\xff\xbd\xb3\x00\x28\x92\xfa\xb0\x95\x34\x69\xd3\x27\x8b\xc0\x62\xf7\xe0\xec\x01\x76\xe1\xba\x3e\x82\xff\x30\xc1\x59\x09\x27\x63\x48\x4e\xe9\x17\x96\xc9\x3b\x36\x15\x08\xee\x4f\x72\xc9\x16\xd8\x34\xa1\x35\x2d\xd3\x39\x2e\x98\x9b\xa6\x05\x9d\x05\xfc\x01\xc9\x55\x37\x6b\x17\xf0\x1c\x92\xd3\x2c\x7b\x21\xd4\x94\x09\x38\x6a\x9a\xf0\xf8\x18\xae\x8b\x12\xb5\x79\x01\xcc\x18\x5c\x14\xa6\x04\x26\x81\x4b\x1a\x1b\x01\x93\x19\x64\x0a\xed\x58\x55\x64\xcc\x20\x28\x0d\x7c\x26\x95\x46\x50\x12\x52\x25\x73\xc1\x53\x93\x84\x79\x25\x53\x88\x14\xfc\xb7\xae\x1d\xfe\xe4\xba\xb8\xe2\x72\x56\x09\xa6\x9b\x26\x6e\xa3\x44\x16\x84\x54\x06\x92\x4b\x75\xae\xa4\xc1\xcf\xa6\x69\x52\xf3\x99\x5c\xd1\x47\xe2\x07\x47\x50\xd7\x28\x33\x02\xe9\x23\xbf\x91\xe7\x3e\x1a\x4c\x95\x12\xa3\x55\xf0\x73\x25\xaa\x85\x2c\xe1\xc3\xc7\xd2\x68\x2e\x67\x23\xbf\xc0\x8f\x8f\xfc\x6e\x5a\xb3\xa9\xe2\x22\xf1\x1f\x31\xa0\xd6\x4a\x43\x1d\x06\x1a\x4d\xa5\x25\xa8\xc4\x21\x75\x40\xfb\x20\xed\xba\x17\x68\x2e\xce\xa2\xb8\xae\x51\x94\x68\x81\x8f\xa0\x9d\xf0\x96\x7e\x5e\x66\x4d\x33\xda\x80\xbe\x81\xfa\x61\xb0\x71\xd8\x84\xe1\x8a\x88\xd0\xa5\x90\x92\xd2\x4b\x23\xfd\x9c\x30\xc9\xd3\xb5\x84\x4e\xfe\x5a\x46\xc1\xfa\x2c\x69\xcc\x72\xb4\x77\x8a\x27\x3f\x5c\x8e\xeb\x30\xe0\x39\xed\x82\x8e\xc8\x0f\x96\xe0\xff\x5b\x5c\x4f\xc6\x20\xb9\x20\xa0\x41\x41\xb4\x47\x36\xe4\x7b\xcd\x8a\x67\x5a\x47\xa8\x75\x1c\x87\x41\xb3\x4d\x0c\x3b\xb2\xbf\x2d\xf9\x50\x95\x5c\xce\xe8\x1b\x3f\x63\x5a\x19\xa5\xbf\xe4\x80\xf7\x5c\x17\x5f\xa7\x8c\xc9\x26\xe5\x04\xc4\xd1\xfb\xcc\x43\xea\x11\xbf\x29\x97\xce\xdc\x0f\xf5\x56\x6d\x4f\xc7\xdf\x24\xa3\x2d\x62\xef\x8b\x9b\x70\xff\xa3\x52\x59\x25\xef\x7b\xc8\xe2\x0a\x71\xc0\x14\x64\x2a\xad\x16\x28\x0d\x33\x5c\x49\xc8\x95\x86\xb9\xba\x07\xa3\xa0\xd0\xaa\x40\x2d\x96\x50\x95\x38\xdc\xab\x8d\x38\xd8\xee\xbe\xaa\xfa\x97\x8b\x6a\x55\x7f\x78\x0e\x0a\xc6\x5d\x72\x7d\x3d\xb2\xf3\x65\x72\x89\xf7\xd1\x41\x5d\x27\x93\xdb\x99\x2b\xff\x27\x20\x15\xd4\xf5\xa0\x25\x20\x7e\xef\x78\x86\x99\xe5\xbc\xb2\xf4\x1c\x58\x35\x84\x01\x75\x0b\x94\x79\x41\xb9\x3c\x30\x7c\x81\xa5\x61\x8b\xe2\xc6\x59\xdd\xcc\x51\x14\xa8\x0f\x20\x81\xc6\x59\x77\xa2\xfe\x49\xa9\xdb\xd2\xca\x68\x20\xff\x4c\x9d\x61\xae\x34\xba\x2c\x58\xa3\xbd\xcf\xc2\xa6\x94\xbb\xdd\x12\x5c\x8b\xd6\x92\x1f\x86\x81\xfc\xfd\x02\x73\x56\x09\x63\x5b\xa2\x4f\x15\x6a\x8e\x65\x72\xa9\xe4\x6f\xa8\x95\x9f\xba\x42\xd2\x81\x57\xc9\x85\xba\x97\x9d\x4e\x3c\xd3\xef\xb9\x99\x7b\xe3\x11\xa8\x38\x0c\x83\xe3\x63\x38\xab\xb8\xc8\x20\x65\xe9\x1c\xe1\x16\x97\xc0\xe5\x91\xe0\x12\xa1\x9a\x09\x2e\x96\x70\x04\x8b\x65\xf9\x49\xc0\x5d\x09\x05\xfd\x2d\xb4\x9a\x0a\x5c\x94\x61\x30\xad\x72\x02\x53\x1a\xbd\x60\x72\x26\x90\xaa\xc3\x59\x95\xe7\xa8\xa3\xd8\xd2\xb4\x21\x19\xda\xe4\xb4\xca\x93\xf7\x9a\x1b\x3c\x5b\x1a\x8c\x0e\xcd\x21\xe5\x06\x48\x9a\xdb\xa6\x73\x3b\x1d\xae\x0f\x27\x34\x4c\xf9\xbd\x19\x41\x4a\x20\x34\x93\x33\xdc\x10\xe3\xc0\xe1\x95\xd5\x65\x94\xee\x76\xb8\x6e\x5a\x1a\x9d\x2a\x79\x97\xbc\x34\x8a\x45\x03\x39\x27\xaf\xb8\xcc\xe2\xad\x18\x86\x76\xe7\x4a\x7c\x5b\x18\xc3\xeb\x61\x37\x8c\xa1\xdd\xd7\xc0\xd8\xf4\xd9\x13\xe1\x03\xbe\x48\x43\x27\x63\xa0\x59\x3f\x11\x87\x41\x27\x92\x49\xd5\x8a\x64\x5a\xe5\xb1\x3d\x66\x5b\x25\xeb\x8e\xd4\x39\xc9\xf2\x75\x65\x92\xb7\x3f\xab\xf4\x96\x3c\x59\xa1\x8e\x9c\x5e\x33\x0a\xf4\xf8\xfa\x0f\xb7\xb8\xfc\xb8\x77\xa0\x6b\x29\x5c\xa8\x30\xb8\x63\xda\x9e\x51\x7b\xff\x84\x56\xd3\x4f\x7c\x60\x22\xa0\x6d\x27\x35\x1a\x02\x32\xa4\xfc\x65\xef\x8b\x4e\x66\x18\x04\xbb\x10\x9c\x0a\xd1\x5e\x93\x0f\x58\x6d\x39\xc3\xfb\x59\xab\xca\xf4\x17\x74\x59\xa4\xcf\x38\x0c\x02\x5f\xdc\x4e\xc6\x6b\xe2\xbd\xee\x7d\x7d\x93\x2d\x4c\x34\x5f\x30\xbd\x7c\x85\xcb\x9e\x31\x11\xbd\xf5\xb6\x78\xfa\x14\x04\x4a\x7f\xf0\x62\x2a\x0b\xff\xb3\xb4\x3f\x5e\x15\x2a\x69\xdf\x82\x46\xf9\xfb\x7f\xbd\x46\x50\xd9\xaa\x44\x66\x6f\xe9\xa9\xbd\xfe\x3c\x05\xa9\x85\x05\x82\x97\xb6\x66\xd8\xa2\x11\xb4\xb7\x0a\x11\xb4\x76\xc3\x38\xe4\x84\xb2\x9d\xe8\xe3\x5c\x2d\x1c\xc3\x82\xdd\x62\xd4\xd5\x46\x5a\xb1\x2f\x47\x74\xbe\xc9\x57\xb1\x5c\x05\x19\xed\x12\xfd\xe6\x62\xbb\x89\xc0\x9d\x9a\x84\xea\xc6\x12\xc6\x6e\xcf\x4e\xf7\xbf\xd0\xd0\xb9\x4a\x6f\xb5\x62\xe9\xfc\xe2\x2c\xca\x38\x13\x48\x21\x0e\xea\xba\xff\xb2\x6e\x9a\x83\x6d\xdd\x9b\x46\xd3\x0e\x77\xcd\x40\x5b\xed\x6d\x6a\x5d\xe8\x3b\x26\x2a\x7c\xcd\x8a\xc2\xee\x9f\x0e\x55\x57\xc6\xce\xb8\xcc\xfc\xd4\x2e\x56\xde\x2d\x0b\xdc\xb9\xeb\x95\xdb\x36\x6a\xd0\x16\xe9\x5e\x71\x1d\x54\x57\xcb\x89\xcf\x9c\x46\x13\x93\x61\x9b\x34\x0b\x57\xa3\xf9\xde\x60\x29\x2e\x05\xdc\x02\x75\x88\xd5\x82\x6d\x5c\x07\x63\x69\xb4\x37\x32\xe6\x94\xa6\xe4\xa5\xcc\xb8\xc6\xd4\x44\xed\xc0\xaf\x64\xf1\x26\x8f\x14\xe9\xe6\x8e\x89\x41\xc3\x60\x27\xcb\xe7\x5a\x2d\xda\x2d\x58\x87\xfe\x3a\x1d\x24\x29\x76\xd7\x9f\x43\x42\x7d\x1d\x97\x06\x75\xce\x52\xac\x5d\x13\x64\x55\xbf\x46\x56\x8f\xc8\x76\x61\x17\x7c\x62\xf4\xee\xd0\x3d\x1f\x6e\xa7\x3c\x77\x4d\xe2\x05\x4e\xab\xd9\x6b\x95\xb9\xf6\xe0\x66\x04\x37\x30\x86\x7c\x61\x92\xe7\x85\xe6\xd2\x08\x19\x75\x66\xb6\x1a\xe9\xd6\xa5\x55\x7b\xbc\xf7\x22\xe2\xaa\x8b\xfd\xc8\xee\xd6\xfa\x6d\xd7\x19\x06\x4e\x29\xd4\xdc\x25\xf6\x5c\xbd\x55\xf7\x51\x0f\x8b\x8b\x91\x24\x49\x9c\x5c\xa5\xcc\x2a\x8f\x28\xa2\x01\xeb\xd2\x36\x41\x3b\x3d\xf9\x50\x91\x6d\x25\xbf\xc4\xab\x7f\xff\xac\x94\x36\x1e\x43\xf9\x49\x24\xcf\xb4\xbe\x54\x6f\xd5\xbd\x2b\xe6\x3e\x22\x49\xf0\xf8\x18\xe8\x42\x48\x95\xb6\x37\x82\x7d\x03\xc9\x43\xe3\xa5\x00\x4c\x2e\xcd\x9c\x1e\x4b\xf7\x73\x94\x60\xe6\xa8\xf1\xb0\xa4\x46\xdc\xdd\x02\x5e\xab\x5d\x47\xb7\x9d\xaa\x9b\xf6\x5c\xd9\x3d\xd2\x6b\x63\x3b\x53\xeb\xc4\x6c\xae\x7b\x9c\x97\x21\x0d\x5d\x0b\xbf\xb5\xf5\xa6\x92\x42\x0f\x49\x7a\x45\xda\x4b\xf0\x4b\x0a\xcb\x41\x27\xa0\x7e\xa3\xb0\x5f\xe7\xd1\x76\x38\x7b\x98\xdb\x8e\x06\xc6\x6e\xbb\x7b\x07\x58\x75\x36\xc1\x03\xcf\x9b\xd5\xbf\x00\x33\x75\x9a\x1b\xd4\x5f\xf5\xb4\xf1\x8f\x97\x55\xda\xbc\x53\xc9\x45\xff\x59\xd3\x84\x7f\x06\x00\x00\xff\xff\xbc\x47\xcc\x92\xea\x15\x00\x00")

func templates17_upsertGoTplBytes() ([]byte, error) {
	return bindataRead(
		_templates17_upsertGoTpl,
		"templates/17_upsert.go.tpl",
	)
}

func templates17_upsertGoTpl() (*asset, error) {
	bytes, err := templates17_upsertGoTplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/17_upsert.go.tpl", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x97, 0x3f, 0x2a, 0x15, 0x61, 0x99, 0xe, 0xf1, 0x25, 0x8c, 0x74, 0x68, 0x91, 0x76, 0xad, 0x3a, 0xac, 0xc4, 0x6e, 0x81, 0xc4, 0xf, 0x38, 0xc, 0x5e, 0xa1, 0x94, 0x49, 0x1d, 0x72, 0x16, 0x9b}}
	return a, nil
}

var _templatesSingletonCrdb_upsertGoTpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x94\x54\x6d\x6f\xda\x3c\x14\xfd\x6c\xff\x8a\xdb\x48\x55\x13\xc9\x0a\x4f\xbf\x3e\x12\x1f\x5a\x92\x76\x4c\x28\x14\x48\xb6\x49\xd3\x54\x85\xe4\x06\xac\x05\x87\xf9\x85\xb6\x5a\xf9\xef\x93\xf3\x42\x68\xe9\x3a\x55\x42\x06\xf9\xde\x73\x7c\x7c\x7c\x2e\x83\x01\x2c\x0d\x2f\xf3\x64\xab\x50\xea\x99\x41\xf9\x34\xaa\xb2\x9f\xb2\x4a\xb3\x75\x70\xdd\xd4\x14\xa4\xb0\x98\x4d\x40\xe9\x54\xe3\x06\x85\x06\xa5\x25\x17\x2b\x30\xca\xae\x7a\x8d\x60\x6a\x78\x90\xea\x14\xb6\xb2\xda\xf1\x1c\x73\x9f\x16\x46\x64\xef\xb1\xbb\x39\x4f\x21\x97\x7c\x87\x52\xf9\x01\x4f\x4b\xcc\x34\x03\x9d\x2e\x4b\x8c\xd2\x0d\xb6\xa7\x30\x30\xdb\x3c\xd5\x38\x15\xa3\x4a\x14\x25\xcf\x34\x2c\xab\xaa\x64\x20\x51\x77\x35\x06\x59\x5b\x63\xf0\xb0\xe6\x1a\x4b\xae\x34\x7c\xff\xd1\x30\x78\x9d\xde\xdf\x94\x74\x7d\x30\xb4\x9b\x9b\x54\xac\x4a\xf4\xc7\x39\x0a\x3d\x33\x95\xc6\x45\xc9\x33\xb4\xba\xfc\xc9\x8c\x81\xfd\x9e\xcf\x7a\x72\x8f\x92\x9e\xfd\x23\x04\x07\x94\x47\x89\xc4\x8f\x61\x25\x6a\x8f\x52\xb2\x34\x05\xfc\x7f\x8c\xbb\x45\x7d\x6d\x8a\x02\xa5\xeb\x51\x92\x63\x81\xf2\xa8\x78\x67\xba\xe2\xd2\x14\x16\x9e\x55\xa5\xd9\x08\x65\x29\x9c\x20\xbc\xb9\x4a\x26\x31\x7c\xb9\x9a\x24\xe1\xc2\xa1\x84\x17\x50\xa2\x70\x7b\x95\x70\x36\x84\xff\xac\x5d\x07\xdc\x10\x8a\x8d\xf6\x17\x5b\xc9\x85\x2e\x5c\xc7\x3d\x57\x5e\x8b\x07\xfb\xdb\x61\x94\x10\xd2\xd8\xac\xfc\xcf\x15\x3f\x62\x63\xe0\x30\x70\xbc\xae\xa3\x53\x58\xa6\x19\xae\xab\x32\x47\xa9\xea\x3b\x27\x0a\xc7\x22\xc7\xc7\xe3\x02\x7b\xa5\x8b\xc1\x25\x83\x4b\xcf\xa3\x64\x4f\x29\xb9\x67\x70\xdf\x0a\xbb\x69\x85\x51\x62\x8d\xb2\x47\x39\xe3\x68\x11\xce\x63\x18\x47\xf1\x14\xce\x95\xfd\x4c\x23\x18\x4d\xa3\x9b\xc9\x78\x14\x43\x2d\xf8\x10\x35\xd6\xdf\x94\x51\x62\xfd\x1a\x0c\x20\xeb\x92\x0a\xf8\xb8\xc5\x4c\xab\x3a\xe9\x87\x00\xe1\x0e\x05\xe8\x75\x65\x56\x1a\x1e\x10\x52\x89\x20\x2a\xdd\x04\x92\x8b\x55\xfd\x62\xfe\x57\xc9\x35\x5e\x3f\x69\x74\x2f\xdc\x0b\xef\x68\x6f\x51\x5b\xe5\xbe\x70\xac\xcf\x70\x6d\xd8\x1b\xed\x8e\x07\x8e\x55\xc7\x0b\x38\x3b\x99\x8a\xe7\xe7\xda\xad\x66\xdf\x83\x61\xf7\x84\x27\x24\xc1\x14\xa2\x69\xfc\x69\x1c\xdd\x3a\xd6\x49\xc0\x52\xe1\x5f\x3b\x93\xbb\xe0\x2a\x0e\x61\x11\xc6\xcd\xd1\xa4\xa8\x24\x70\x06\x3b\x1b\x25\x99\x8a\x15\xb6\x33\x58\x33\x58\x65\xbc\x4f\x0f\x79\x6d\x02\xb3\x26\x10\xb2\xb7\xcb\x2f\x9b\xf9\xfc\x65\xa8\xfb\x61\x38\x99\x83\x5d\x8d\x7c\x2d\xb1\x21\x79\xb3\xe4\xc0\x10\xc2\x6f\xa3\x49\x12\x84\x81\xef\xfc\x03\xbd\x6f\x22\xd5\x4e\x82\x9d\xb9\xfe\x16\xa7\xc4\xf3\x30\x4e\xe6\xd1\x38\xba\x85\x9a\xf7\xdd\x57\xad\xff\xa6\xba\x07\xb5\x67\x48\xd4\x46\x0a\xb0\xa0\xb6\xdf\xa3\xfb\x3f\x01\x00\x00\xff\xff\xb7\x86\x27\x52\x88\x05\x00\x00")

func templatesSingletonCrdb_upsertGoTplBytes() ([]byte, error) {
	return bindataRead(
		_templatesSingletonCrdb_upsertGoTpl,
		"templates/singleton/crdb_upsert.go.tpl",
	)
}

func templatesSingletonCrdb_upsertGoTpl() (*asset, error) {
	bytes, err := templatesSingletonCrdb_upsertGoTplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/singleton/crdb_upsert.go.tpl", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0xd, 0x86, 0x7, 0x46, 0xba, 0xad, 0x9c, 0xf2, 0x87, 0x63, 0xf2, 0x39, 0x8f, 0x91, 0xf2, 0x4, 0x5c, 0x29, 0x91, 0xf9, 0xde, 0x8c, 0xea, 0x84, 0xe2, 0xa1, 0xfa, 0xe4, 0xd4, 0xfe, 0x75, 0x99}}
	return a, nil
}

var _templates_testSingletonCrdb_main_testGoTpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xc4\x57\x6d\x6f\xdb\x36\x10\xfe\x1c\xfd\x8a\xab\x80\xb4\x52\xa0\xd0\xfb\x9c\x41\xc8\x1c\xdb\x29\x82\xb6\x49\x67\xa7\xeb\x5e\x3a\xac\xb4\x74\xb6\x89\x48\xa4\x42\x52\x75\xdd\x2e\xff\x7d\xe0\x8b\x2c\xc9\x71\xda\x6c\x1d\xb6\x4f\x89\xef\x9e\x7b\x79\xee\x8e\xe4\xe9\x03\x95\x20\x97\x1f\x47\xe3\xb3\xf3\x1b\xdc\x40\x0a\x12\x97\xf8\xb1\x22\xaf\x6a\xa5\x47\xa2\xac\x58\x81\xd1\xfb\xe8\xb4\x8c\xa3\xe8\x1d\x8f\x4f\xc9\xd1\xe8\xea\x72\x76\x3d\x1d\x5e\x5c\x5e\x93\xa3\xd3\xf3\xab\xe9\xe4\xe2\xf9\x25\xbc\x98\xfc\x42\x8e\x4e\xdf\xf1\x3f\x2d\xe8\x37\x7a\xfc\x69\x78\xfc\x2b\xfc\xf1\x8e\xfc\x7e\xf4\xd3\xf0\xe5\xc5\x78\x78\x3d\x81\x9e\xa1\x45\xc7\xef\xe3\x20\xd0\x9b\x0a\x21\x93\xf9\xfc\x1a\x95\x46\x09\x4a\xcb\x3a\xd3\xf0\x39\x00\xc8\xe7\x23\xc1\x39\x1c\xa9\xdb\x82\x8c\xcf\x02\x2b\xb9\xa4\x25\x82\x01\x31\xbe\x0c\x00\x56\x42\x69\x80\x8e\xa0\x56\x28\x7b\x82\x8a\x2a\xd5\x13\x28\x55\x94\x22\xc7\x0e\x42\x48\xeb\x83\x71\x6d\x62\x68\x54\x7a\x7c\x66\xe3\x78\xc8\x56\xf8\x66\xfa\xb2\x35\xcb\xe7\xe6\x67\xc7\xf5\x5d\x10\x2c\x6a\x9e\x01\xe3\x4c\x47\xb1\x67\xf0\x8a\x32\x0e\x29\x3c\x6d\x19\x7e\xbe\x33\xc8\xc1\x00\x14\xea\xba\x82\xbc\x2e\x2b\x05\x7a\x85\x90\x53\x4d\xe7\x54\x21\xa8\x6c\x85\x25\x05\xca\x73\x60\xa5\xc9\x4e\x01\xd3\x26\x3d\x01\x14\x34\x1a\x11\x95\x1b\x90\x94\xe7\xa2\x2c\x36\xc6\xd7\x12\x39\x4a\xaa\x31\xb7\x99\x76\x5c\x09\xd0\x2b\xaa\xad\x54\x41\x46\x39\xcc\x11\x64\xcd\x81\x2e\x29\xe3\x4a\x1b\xc7\xb5\x62\x7c\x69\x32\xe8\x3b\x52\xb7\xc5\x5c\xb0\x02\x25\x5c\x4d\x5f\x41\x45\xb3\x1b\xba\x44\xe2\x28\x46\x19\x1c\xb5\x8c\x62\x47\x25\x8a\x01\xa5\x14\xd2\x32\x37\x73\x85\x52\x3a\x89\xa9\x60\x46\x7c\xf3\x52\xf8\xc0\x2a\x94\xe4\x39\xea\x99\x2d\x5c\x14\x1a\x57\x24\x9f\x73\x5a\x62\x18\x5b\xac\xed\xeb\x43\x48\xa3\xf4\x38\xdb\xee\x87\x70\x46\xe9\x71\x76\x0a\x1e\xc2\x19\x65\x83\x33\xb3\xd0\xc1\x5d\x70\xdd\x80\x84\x6c\x82\x36\x13\xf4\x90\x3f\xaf\xb7\xe8\xc1\x00\x46\x12\xa9\x46\xa0\xbe\x61\xec\x13\xe6\x90\xcf\xc1\xb0\x25\xd6\x5f\x67\xe2\xd2\x16\x44\x66\x9a\xce\x0b\x74\x8a\xa8\x29\x5f\x1c\x74\x4c\xcc\x00\xa6\x30\xaf\x59\x91\xff\x58\xa3\xdc\xf8\x2c\x5c\x59\x12\x4f\x3b\xe9\x45\x48\x7c\x71\x13\x4f\x36\x69\xf9\xc4\xbe\x4b\x8f\xf6\xea\x32\xfa\xa2\xc7\x00\x80\x2d\xec\x20\xa4\xc6\x40\x8a\xea\xda\xa6\x12\xc5\xdf\x5b\xe9\x93\x14\x38\x2b\xec\xc4\x00\x48\xd4\xb5\xe4\x46\x1e\x00\xdc\xf5\x4d\x33\x5b\xc4\xc7\x1b\x9b\xc3\x57\x97\xd5\xa8\xcc\xe1\x24\x05\xfc\x88\x19\x19\x89\xb2\xa4\x3c\x8f\xc2\x4c\x64\x37\x52\xd0\x6c\x15\x26\x10\x1a\x54\xd8\x65\x13\x1e\x1f\xd7\xb2\xf0\xa2\x37\xd3\x97\x56\xc2\xb8\xc2\xac\x96\x18\xda\x5f\xc6\xe6\xd8\x10\x4c\xdd\x51\x75\x73\x61\x33\xfc\x7a\x40\x75\x5b\x84\xbd\x28\xdb\x5e\x3a\xdf\xfe\xe8\x86\xbb\x7d\xeb\x66\x61\x0b\x2b\x13\x58\x9b\x58\x4c\x90\xd7\xac\xc2\x28\x6e\x39\x93\x99\xce\x45\x6d\x26\x79\xdd\xcd\xcc\x88\xed\x75\xc4\x71\x7d\xfe\x02\x37\x63\x54\x5a\x8a\x0d\xca\xa8\x7d\x02\x12\x90\xfd\xb6\xb5\x2e\xa9\xd4\x7b\x4b\xdf\x2d\xbe\x90\x8a\xbc\x95\xb4\x8a\x50\xca\x04\xc2\x05\x65\x85\xb9\x94\x04\x28\x63\x0e\xcf\xb6\xa5\xb0\x7e\x9f\x41\xe6\x6a\x64\x2b\xd8\x6f\x79\x27\xe9\x7f\x37\xb0\xba\x2d\x76\xe3\xee\xe3\xfb\x96\xb2\x6f\x88\xba\xa6\x4c\xc3\x42\xc8\xaf\x07\x1e\x0c\x60\xb8\x30\x2f\x5f\x33\xaf\x4c\x41\x2e\xb8\x39\x57\x85\x50\x68\x9f\x86\xb5\x64\x1a\x01\x79\x0e\x62\x61\x05\x15\xab\xb0\x9b\xf4\x9a\x8c\x0c\xf8\x9f\xe7\xeb\x62\x19\xb7\x7b\x4a\xd2\xf6\xe2\xbf\x2a\x8a\x77\xc6\x59\xb1\x7d\x56\x77\xdf\x1c\x59\xf3\x51\x99\x47\xca\x8c\x74\xd2\x78\xf0\x6f\x71\x02\x54\x2e\x15\x10\x42\xdc\xef\xee\xcb\x94\xed\x39\xa1\xde\xda\x99\x11\x42\x62\x87\x23\x13\xfe\x01\x52\x10\xca\xfc\xc3\xa4\xe0\x51\x73\x34\x0a\xe4\x2e\x72\x6c\xca\xf0\x9d\x2f\x42\xd6\x39\x62\x2e\xb0\x22\x97\xb8\x9e\x22\xcd\x51\x7a\x7c\xc3\x50\xb9\x13\x7a\x92\xc2\xd3\xf9\x46\xa3\x22\x67\xf5\x62\x61\xb7\x03\xab\x33\x05\xde\xab\xcb\xba\xa7\xdb\x39\x69\xa5\xae\x5d\xce\xbc\x6d\xe0\x49\x6a\xf5\xd3\x9a\xef\x6d\xdd\xa2\xd4\xe4\xb5\x64\x5c\x17\x3c\x6a\x9a\x25\x6b\xce\x19\x5f\x9e\x84\xdb\xca\xba\xda\xc4\xf7\x2c\x5c\x0a\xc4\x3f\x12\xf1\x5e\x00\x4a\xb9\x03\xb8\x7f\x5b\x3f\xa2\xe3\xfd\x37\xa0\xd3\x52\xa5\x4b\x5b\x49\x13\x76\x56\x99\xb8\x8b\x28\x1c\x4d\x27\x66\xed\x1c\x0f\xaf\x87\x67\xc3\xd9\x04\x0e\xd5\xce\x95\x1a\xb7\x51\x33\xe2\xa7\x29\x34\x57\xf3\xdf\xb9\xae\xfb\x0f\x83\x19\xaa\x5a\x9b\x1f\x26\xa5\xf8\x41\x26\xdd\x87\xf0\x6b\x3c\xc6\xd3\xab\xd7\x2d\x8b\x8b\x73\x98\xfc\x7c\x31\xbb\x9e\xc1\xa1\x82\xd1\x70\x36\x1a\x8e\x27\xff\x0b\xaf\xc1\x00\x34\x52\x99\x8b\x35\x07\xaf\x56\x90\x15\x48\x79\x5d\x81\xa6\xea\x46\xc1\x7a\x85\xdc\xde\x56\x6e\xfb\x5c\x30\xce\xd4\xaa\x19\xad\xfd\x85\x69\x5c\x7e\x61\x97\xec\x6f\x14\xf6\x13\xe1\x0b\x97\xdf\xbd\x9d\xa2\xb1\x01\x8b\xfa\xa6\x05\xe5\x91\x53\x2b\xb8\xa1\x13\xf9\xcf\x98\xc4\xd1\x70\xdf\x07\x6c\xd1\xe6\xb3\x2f\x52\xa3\x4c\x6c\x04\x1f\x73\xb7\x1c\x2d\xc8\x1f\xff\xdb\x82\x5c\x55\xc8\xa3\xb0\x12\x4a\x2f\x25\xaa\x7e\x7f\xe3\x96\xf3\xbe\x98\x9c\x15\xc9\x1e\x8a\xfd\x54\x1a\xb2\xf7\xb6\x44\xb7\x23\xba\x0d\xd1\x6d\xf4\x89\xfb\x48\x6b\x2e\x66\xbb\x61\x33\xae\x93\x9d\x0f\xb1\xd8\xff\x85\xcf\xc1\x81\x61\x58\x57\xcd\x77\xd5\x01\x5b\xb8\xcf\xba\x27\x29\x84\xa1\xd1\x1f\xd4\x15\xa4\x56\x16\x1c\xdc\x59\xbd\xdd\xef\x77\xf4\xbd\x53\x74\xa8\x4e\xec\x05\x50\x57\x2e\xbb\xd8\x58\x06\x07\x9e\x5c\x0f\xda\x54\xed\xb6\x38\x19\x0c\x0e\xd5\x0f\xc6\x34\x1f\x1c\xaa\x53\x9f\x70\xba\x75\xe4\xd6\x5e\xb7\xf4\x36\x64\xb7\xab\xef\x5d\xf0\x57\x00\x00\x00\xff\xff\x4b\xcf\xb5\x16\x5c\x0f\x00\x00")

func templates_testSingletonCrdb_main_testGoTplBytes() ([]byte, error) {
	return bindataRead(
		_templates_testSingletonCrdb_main_testGoTpl,
		"templates_test/singleton/crdb_main_test.go.tpl",
	)
}

func templates_testSingletonCrdb_main_testGoTpl() (*asset, error) {
	bytes, err := templates_testSingletonCrdb_main_testGoTplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates_test/singleton/crdb_main_test.go.tpl", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0xf, 0x9d, 0xd7, 0x24, 0x44, 0x1b, 0x1f, 0x9c, 0x4f, 0xde, 0xe0, 0xb0, 0x14, 0x44, 0x1d, 0xeb, 0xd0, 0xe4, 0x2f, 0x6c, 0xaa, 0xc7, 0x99, 0xfc, 0x5f, 0x6e, 0xc5, 0xa4, 0xc6, 0x9a, 0x60, 0x39}}
	return a, nil
}

var _templates_testSingletonCrdb_suites_testGoTpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x54\x8f\xc1\xca\x83\x30\x10\x84\xef\xff\x53\x0c\xe2\x41\x7f\x34\x0f\xf0\xc3\x7f\xea\xa9\x3d\xf4\x50\xec\x03\xa4\x75\x95\x40\xba\x15\xb3\x42\x21\xe6\xdd\x8b\x31\x58\x7b\xcb\x64\xe6\xdb\x9d\xed\x26\xbe\xa3\x21\x27\xd7\xc1\xd1\x28\x85\xe0\x57\xc8\x89\xe1\x5e\x35\x25\xfc\x0f\xe0\x7d\x8d\x51\x73\x4f\xc8\x0d\xb7\xf4\xaa\x90\x8b\xbe\x59\xc2\xdf\x3f\x54\xb3\xbc\x5c\x08\x29\x67\xba\x64\xaa\xa3\x3b\x3d\x0d\x47\x1b\xf5\xe6\x93\x75\x7b\xb9\x66\xcf\xfa\x11\x87\x25\x32\xca\x19\x83\x9d\x46\x6d\x31\x43\x8c\x58\x3a\xe8\x0d\x14\x75\x99\xb8\xc8\xbc\xff\xd0\x21\x64\x15\x96\xda\xdf\x9f\xeb\x49\x65\x5c\x46\xdc\xee\x7b\x24\x15\xde\x01\x00\x00\xff\xff\x91\x6e\x4f\x2d\xff\x00\x00\x00")

func templates_testSingletonCrdb_suites_testGoTplBytes() ([]byte, error) {
	return bindataRead(
		_templates_testSingletonCrdb_suites_testGoTpl,
		"templates_test/singleton/crdb_suites_test.go.tpl",
	)
}

func templates_testSingletonCrdb_suites_testGoTpl() (*asset, error) {
	bytes, err := templates_testSingletonCrdb_suites_testGoTplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates_test/singleton/crdb_suites_test.go.tpl", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x3c, 0xee, 0x2e, 0x96, 0xb6, 0x68, 0x8e, 0xe6, 0x13, 0x5b, 0x19, 0xc, 0x3f, 0x8d, 0xbd, 0x45, 0xf6, 0x91, 0xd7, 0x45, 0x15, 0xdd, 0x12, 0x15, 0x2a, 0x56, 0x1f, 0x17, 0xb9, 0xb8, 0xb3, 0x99}}
	return a, nil
}

var _templates_testUpsertGoTpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xd4\x54\xcd\x6e\xdb\x3c\x10\x3c\x8b\x4f\xb1\x9f\xf1\xb5\xa0\x0a\x85\x41\xaf\x29\x7c\x70\x7e\x0e\x41\x51\xc3\x88\xe5\x73\xc1\x48\x2b\x87\x30\x4d\x0a\xe4\xaa\xb6\x2b\xf0\xdd\x0b\x52\x4e\xe2\xfc\x15\x46\xd1\xa2\xe8\xc1\x96\x48\xcc\xce\xec\xce\xee\xaa\xef\x4f\xe0\x7f\xa9\x95\xf4\x70\x36\x06\x31\x89\x6f\xe8\x45\x29\x6f\x35\xc2\xf0\x10\x53\xb9\xc6\x10\x58\xd3\x99\x0a\x08\x3d\xf5\xfd\x10\x21\x16\xed\x4c\x77\x4e\xea\x10\x16\xad\x47\x47\x9c\xe0\x43\x04\x28\xb3\x14\x65\x0e\x3d\xcb\x48\xcc\xa4\x93\x5a\xa3\xe6\x39\x63\x99\x6a\x40\xa3\xe1\x0f\x04\x97\x76\x63\xe6\xca\x2c\x3b\x2d\x5d\x08\x13\xad\x2f\xac\xee\xd6\xc6\xe7\x30\x1e\xff\x0c\x39\x73\x6a\x2d\xdd\xee\x33\xee\x1e\x02\x7a\x96\x65\x24\xe6\x2b\xd5\xf2\x51\xfc\x6f\x95\x59\x02\xa5\x32\x36\x8a\xee\xc0\x1a\xbd\x83\x76\x88\x83\x15\xee\xa0\x1a\x22\x47\x39\xcb\x02\x63\x99\x47\xac\xa3\x05\x4e\x9a\xda\xae\xd5\x77\x14\x53\xdc\xcc\x11\x6b\x9e\xb3\xec\x9b\x74\x80\x2e\xfd\xac\x63\xd9\xe9\x29\x4c\x88\x70\xdd\x12\xd0\x1d\xc2\xf5\x74\x7e\x75\x53\x82\x57\x35\x82\x6d\x40\x1a\x58\xcc\xe2\x0d\xcb\x6c\x64\x3c\xb0\xeb\xb1\x82\x3e\x24\x37\x22\xe9\xa1\xe6\x9c\x5c\x57\x11\x8f\xc9\x14\xf0\xde\x16\xf0\x86\x01\x97\xe7\xe5\xae\x45\x5f\x00\xb9\x0e\xf3\x4f\x89\xe7\xbf\x31\x18\xa5\xf7\x46\x5c\xc5\x4c\x1b\x3e\x5a\x98\x64\x01\xd9\x47\x91\xd7\x13\x02\x9f\xa4\xcf\xe0\x9d\x1f\x15\x91\x6f\xef\x4b\xdf\xab\x06\x8c\x25\x10\x53\x7b\x61\x0d\xe1\x96\x42\xa8\x68\x1b\x2b\xab\x86\xb3\x38\x97\xd5\x6a\xe9\x6c\x67\x6a\x9e\xf7\x3d\x9a\x3a\x04\x96\x0d\x90\x2f\x9d\xa7\x72\xcb\x13\xcb\x21\xc3\x8b\x8b\x5b\xab\xb4\x38\xc7\xa5\x32\x89\x43\x7b\x3c\xbc\x2b\xb7\xbc\xa2\x6d\x11\x0b\xbc\x57\x38\x0a\x94\xb3\xac\xc6\x06\x1d\xc4\xe1\xe5\x39\xf4\xf0\x15\xc6\x40\x5b\x71\x63\xb5\xbe\x95\xd5\x8a\xe7\x10\x62\x87\x1f\x7a\x61\xc5\x7e\x96\xdf\x2a\x3c\xf6\x04\x4d\x0d\x27\x21\x40\x3c\x35\x52\x7b\x4c\xa2\x05\xa4\x5c\xae\x4d\x83\x8e\xe7\x4f\x4f\xc7\xf5\xa8\x4b\xd2\xaf\x37\xe8\x45\x67\x2a\xdb\x19\x4a\x17\xcf\xa6\xec\x7e\x29\x79\x2e\x2e\x22\xe6\xc8\x52\x1e\x5d\x78\x99\x25\xbf\x97\x8d\x90\x24\x1c\x41\x1f\x9f\x40\x46\x1b\x69\x08\xac\x41\x70\x58\x59\x57\x17\xb0\xb4\x74\x36\x2a\x06\xfc\x3e\xe9\x67\xab\xb3\x98\x5d\x4e\xca\xab\xd7\x56\xe7\x77\x2c\xc7\xbe\x35\xc7\x7e\x44\x84\x10\x7f\x74\x95\x7e\x7d\xc6\xe2\x96\xff\xe5\x11\xfb\x47\x26\x2c\x30\xf6\x23\x00\x00\xff\xff\xd2\x23\x08\xc0\xd3\x06\x00\x00")

func templates_testUpsertGoTplBytes() ([]byte, error) {
	return bindataRead(
		_templates_testUpsertGoTpl,
		"templates_test/upsert.go.tpl",
	)
}

func templates_testUpsertGoTpl() (*asset, error) {
	bytes, err := templates_testUpsertGoTplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates_test/upsert.go.tpl", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0xf7, 0xe5, 0xa7, 0xf1, 0xd4, 0x77, 0xa4, 0xdd, 0x88, 0x4b, 0xe4, 0xe9, 0x77, 0xd0, 0xa0, 0x88, 0x7c, 0x38, 0xd9, 0x13, 0x81, 0xd1, 0xcd, 0xa, 0xba, 0x66, 0x34, 0x55, 0xfd, 0xcd, 0xb9, 0x77}}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// AssetString returns the asset contents as a string (instead of a []byte).
func AssetString(name string) (string, error) {
	data, err := Asset(name)
	return string(data), err
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// MustAssetString is like AssetString but panics when Asset would return an
// error. It simplifies safe initialization of global variables.
func MustAssetString(name string) string {
	return string(MustAsset(name))
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetDigest returns the digest of the file with the given name. It returns an
// error if the asset could not be found or the digest could not be loaded.
func AssetDigest(name string) ([sha256.Size]byte, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return [sha256.Size]byte{}, fmt.Errorf("AssetDigest %s can't read by error: %v", name, err)
		}
		return a.digest, nil
	}
	return [sha256.Size]byte{}, fmt.Errorf("AssetDigest %s not found", name)
}

// Digests returns a map of all known files and their checksums.
func Digests() (map[string][sha256.Size]byte, error) {
	mp := make(map[string][sha256.Size]byte, len(_bindata))
	for name := range _bindata {
		a, err := _bindata[name]()
		if err != nil {
			return nil, err
		}
		mp[name] = a.digest
	}
	return mp, nil
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"templates/17_upsert.go.tpl":                       templates17_upsertGoTpl,
	"templates/singleton/crdb_upsert.go.tpl":           templatesSingletonCrdb_upsertGoTpl,
	"templates_test/singleton/crdb_main_test.go.tpl":   templates_testSingletonCrdb_main_testGoTpl,
	"templates_test/singleton/crdb_suites_test.go.tpl": templates_testSingletonCrdb_suites_testGoTpl,
	"templates_test/upsert.go.tpl":                     templates_testUpsertGoTpl,
}

// AssetDebug is true if the assets were built with the debug flag enabled.
const AssetDebug = false

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"},
// AssetDir("data/img") would return []string{"a.png", "b.png"},
// AssetDir("foo.txt") and AssetDir("notexist") would return an error, and
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		canonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(canonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"templates": {nil, map[string]*bintree{
		"17_upsert.go.tpl": {templates17_upsertGoTpl, map[string]*bintree{}},
		"singleton": {nil, map[string]*bintree{
			"crdb_upsert.go.tpl": {templatesSingletonCrdb_upsertGoTpl, map[string]*bintree{}},
		}},
	}},
	"templates_test": {nil, map[string]*bintree{
		"singleton": {nil, map[string]*bintree{
			"crdb_main_test.go.tpl": {templates_testSingletonCrdb_main_testGoTpl, map[string]*bintree{}},
			"crdb_suites_test.go.tpl": {templates_testSingletonCrdb_suites_testGoTpl, map[string]*bintree{}},
		}},
		"upsert.go.tpl": {templates_testUpsertGoTpl, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory.
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	return os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
}

// RestoreAssets restores an asset under the given directory recursively.
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(canonicalName, "/")...)...)
}
